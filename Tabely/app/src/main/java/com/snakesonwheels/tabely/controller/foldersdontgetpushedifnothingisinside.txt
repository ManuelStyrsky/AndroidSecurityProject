package com.snakesonwheels.tabely.view;

import android.content.Intent;
import android.graphics.Color;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

import com.snakesonwheels.tabely.R;
import com.snakesonwheels.tabely.model.DBTools;
import com.snakesonwheels.tabely.model.RestaurantRequest;

import java.util.ArrayList;
import java.util.HashMap;

public class RestaurantDetailsActivity extends AppCompatActivity {

    // The object that allows me to manipulate the database

    DBTools dbTools = new DBTools(this);

    /* just as a test. define restaurant details as strings */
    public String restaurantName = "Piedro Pizza";
    public String cuisine = "Italian";
    public int openingTime = 1800;
    public int closingTime = 2300;
    public String restaurantdescription = "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam, ";
    public String priceRange = "€ € €";
    public String website = "www.pizzapiedro.com";
    public String address = "Leopoldstr. 5, 80324 Munich";
    public String restaurantphone = "02348592";

    public Button buttontimeleft;
    public Button buttontimemiddle;
    public Button buttontimeright;
    public Button buttonreserve;

    //for the grey top bar text values
    private TextView textTime;
    private TextView textDate;
    private TextView textSeats;

    private String restaurantId;
    private RestaurantRequest request;

    private int[] activeTables = new int[3];
    private int currentTable = -1;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_restaurant_details);

        request = new RestaurantRequest();
        Intent theIntent = getIntent();
        restaurantId = theIntent.getStringExtra("restaurantId");

        //insert strings into top grey bar
        textTime = (TextView) findViewById(R.id.TextTime);
        textDate = (TextView) findViewById(R.id.TextDate);
        textSeats = (TextView) findViewById(R.id.TextSeats);

        //request data
        request.time = getIntent().getIntExtra("time", 1800);
        request.date = getIntent().getIntExtra("date", 14102018);
        request.searchText = getIntent().getStringExtra("search");
        request.locationText = getIntent().getStringExtra("location");
        request.seats = getIntent().getIntExtra("seats", 2);
        request.outdoor = getIntent().getIntExtra("outdoor", 0);
        request.window = getIntent().getIntExtra("window", 0);
        request.userID = getIntent().getStringExtra("userid");

        textTime.setText(request.getTimeString());
        textDate.setText(request.getDateString());
        textSeats.setText("" + request.seats);

        additionalSetup();

        /*insert the restaurant details as text. at the moment from strings above*/
        final TextView textViewRestaurantName = (TextView) findViewById(R.id.textViewRestaurantName);
        textViewRestaurantName.setText(restaurantName);
        final TextView textViewCuisine = (TextView) findViewById(R.id.textViewCuisine);
        textViewCuisine.setText(cuisine);
        final TextView textViewPriceRange = (TextView) findViewById(R.id.textViewPriceRange);
        textViewPriceRange.setText(priceRange);
        final TextView textViewAddress = (TextView) findViewById(R.id.textViewAddress);
        textViewAddress.setText(address);
        final TextView textViewOpeningTime = (TextView) findViewById(R.id.textViewOpeningTime);
        textViewOpeningTime.setText(request.getTimeString(openingTime));
        final TextView textViewClosingTime = (TextView) findViewById(R.id.textViewClosingTime);
        textViewClosingTime.setText(request.getTimeString(closingTime));
        final TextView textViewrestaurantphone = (TextView) findViewById(R.id.textViewPhone);
        textViewrestaurantphone.setText(restaurantphone);
        final TextView textViewwebsite = (TextView) findViewById(R.id.textViewWebsite);
        textViewwebsite.setText(website);
        final TextView textViewrestaurantdescription = (TextView) findViewById(R.id.textViewDescription);
        textViewrestaurantdescription.setText(restaurantdescription);

        //communicate with db

        int beforeTime = request.getBeforeTableTime();
        int afterTime = request.getAfterTableTime();

        if (beforeTime<openingTime|| (beforeTime+100) > closingTime) {
            activeTables[0] = -1;
        } else {
            activeTables[0] = dbTools.getBestAvailableTableId(restaurantId, request.seats, request.window, request.outdoor, beforeTime, ((beforeTime + 100) % 2400),  request.date);
        }
        if (request.time<openingTime || (request.time+100) > closingTime) {
            activeTables[1] = -1;
        } else {
            activeTables[1] = dbTools.getBestAvailableTableId(restaurantId, request.seats, request.window, request.outdoor,request.time , (request.time + 100),  request.date);
        }
        if (afterTime<openingTime || (afterTime+100) > closingTime) {
            activeTables[2] = -1;
        } else {
            activeTables[2] = dbTools.getBestAvailableTableId(restaurantId, request.seats, request.window, request.outdoor, afterTime, ((afterTime + 100) % 2400), request.date);
        }

        System.out.println("First TabLe: "+activeTables[0]);
        System.out.println("Second TabLe: "+activeTables[1]);
        System.out.println("Third TabLe: "+activeTables[2]);

        //activate time buttons
        buttontimeleft = (Button) findViewById(R.id.buttontimeleft);
        buttontimemiddle = (Button) findViewById(R.id.buttontimemiddle);
        buttontimeright = (Button) findViewById(R.id.buttontimeright);
        buttonreserve = (Button) findViewById(R.id.buttonreserve);

        //initial button enabling and disabling.
        buttonreserve.setEnabled(false);
        if (activeTables[0] == -1) {
            buttontimeleft.setEnabled(false);
        } else {
            buttontimeleft.setEnabled(true);
        }
        if (activeTables[1] == -1) {
            buttontimemiddle.setEnabled(false);
        } else {
            buttontimemiddle.setEnabled(true);
        }
        if (activeTables[2] == -1) {
            buttontimeright.setEnabled(false);
        } else {
            buttontimeright.setEnabled(true);
        }

        buttontimeleft.setSelected(false);
        buttontimeright.setSelected(false);
        buttontimemiddle.setSelected(false);


        if (buttontimeright.isEnabled()) {
            buttontimeright.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    buttontimeleft.setSelected(false);
                    buttontimeleft.setTextColor(Color.BLACK);
                    buttontimemiddle.setSelected(false);
                    buttontimemiddle.setTextColor(Color.BLACK);
                    buttontimeright.setSelected(true);
                    buttontimeright.setTextColor(Color.WHITE);
                    buttonreserve.setEnabled(true);

                    currentTable = 2;
                }
            });
        }


        if (buttontimeleft.isEnabled()) {
            buttontimeleft.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    buttontimeleft.setSelected(true);
                    buttontimeleft.setTextColor(Color.WHITE);
                    buttontimemiddle.setSelected(false);
                    buttontimemiddle.setTextColor(Color.BLACK);
                    buttontimeright.setSelected(false);
                    buttontimeright.setTextColor(Color.BLACK);
                    buttonreserve.setEnabled(true);

                    currentTable = 0;
                }
            });
        }

        if (buttontimemiddle.isEnabled()) {
            buttontimemiddle.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    buttontimeleft.setSelected(false);
                    buttontimeleft.setTextColor(Color.BLACK);
                    buttontimemiddle.setSelected(true);
                    buttontimemiddle.setTextColor(Color.WHITE);
                    buttontimeright.setSelected(false);
                    buttontimeright.setTextColor(Color.BLACK);
                    buttonreserve.setEnabled(true);

                    currentTable = 1;
                }
            });

        }

        setUpTimeButtons();

        buttonreserve.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                int reserveTable = activeTables[currentTable];
                int selectedTime = getTimeForSelectedSlot();
                dbTools.insertReservation("" + reserveTable, "" + Integer.parseInt(request.userID), selectedTime, (selectedTime + 100) % 2400,  request.date);
                startActivity(new Intent(RestaurantDetailsActivity.this, ConfirmActivity.class));
            }
        });

    }

    void setUpTimeButtons() {
        int before = request.getBeforeTableTime();
        int middle = request.getTableTime();
        int after = request.getAfterTableTime();

        buttontimeleft.setText(request.getTimeString(before));
        buttontimemiddle.setText(request.getTimeString(middle));
        buttontimeright.setText(request.getTimeString(after));
    }

    void additionalSetup() {
        HashMap<String, String> RestaurantDetails = dbTools.getRestaurantDetails(restaurantId);

        restaurantName = RestaurantDetails.get("restaurantName");
        //cuisine = "Italian";
        cuisine = RestaurantDetails.get("cuisine");
        openingTime = Integer.parseInt(RestaurantDetails.get("openingTime"));
        closingTime = Integer.parseInt(RestaurantDetails.get("closingTime"));
        restaurantdescription = RestaurantDetails.get("description");
        //priceRange = "€ € €";
        priceRange = RestaurantDetails.get("priceRange");
        website = RestaurantDetails.get("website");
        address = RestaurantDetails.get("address");
        restaurantphone = RestaurantDetails.get("phone");

    }

    /**
     * private int getAvailableTables(int seats, int window, int outside, String userId, int time, int date) {
     * <p>
     * int start = time;
     * int end = time + 100;
     * <p>
     * ArrayList<Integer> possible = dbTools.getAllPossibleTables(restaurantId, seats, window, outside);
     * <p>
     * for (int i = 0; i < possible.size() ; i++) {
     * int currentTable = possible.get(i);
     * if (!dbTools.checkIfReservationExists(currentTable, start, end, date)) {
     * continue;
     * }
     * System.out.println("currentTable"+currentTable);
     * return currentTable;
     * }
     * <p>
     * return -1;
     * }
     */

    private int getTimeForSelectedSlot() {
        switch (currentTable) {
            case 0:
                return request.getBeforeTableTime();
            case 1:
                return request.time;
            case 2:
                return request.getAfterTableTime();
            default:
                return -1;
        }
    }

}
